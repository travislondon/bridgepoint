.//=====================================================================
.// File:      create_label_provider.inc
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// This file is responsible for creating the adapter that decouple the
.// client model objects from the tree viewer by providing the naming and
.// label information for the tree to show.
.//
.function create_label_provider
  .param string path
  .//
  .assign provider_name = "ModelLabelProvider"
  .assign attr_result = provider_name
package org.xtuml.bp.ui.explorer;
//======================================================================
//
// File: ${path}/${provider_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
//
//======================================================================
//
// This class is responsible for decoupling the client model objects
// from the tree viewer by providing the naming and label information
// for the tree to show.
//
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.MultipleOccurrenceElement;
import org.xtuml.bp.core.util.CoreUtil;
import org.xtuml.bp.core.common.NonRootModelElement;
/**
 * This file adapts the meta-model entities so that they work with the
 * Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Project 
 * Technology MC-Java code generator product.
 * </p>
 */
public class ${provider_name} extends LabelProvider {
  private Map imageCache = new HashMap(11);
  /**
   * @see ILabelProvider#getImage(Object)
   */
  public Image getImage(Object element) {
	if(element instanceof MultipleOccurrenceElement) {
		element = ((MultipleOccurrenceElement) element).getElement();
	}
    return CorePlugin.getImageFor(element);
    }
  /**
   * @see ILabelProvider#getText(Object)
   */
  public String getText(Object element) {
 	if(element instanceof MultipleOccurrenceElement) {
    	element = ((MultipleOccurrenceElement) element).getElement();
	}
  .select many tree_nodes from instances of T_TNS
  .for each node in tree_nodes
    .select any node_class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke ncn = get_class_name(node_class)
    .if (first tree_nodes)
    if (element instanceof ${ncn.body}) {
    .else
    else if (element instanceof ${ncn.body}) {
    .end if
    .if ("${node.Label}" != "")
      return "${node.Label}";
    .elif ("${node.NamingAttributeRelChain}" != "")
      .// We need to navigate to a different instance to obtain the name to use
      .// First obtain the class at the end of the navigation
       .invoke nav_string = generate_backward_rel_chain_nav( node, node.NamingAttributeRelChain, "one", "element", "result" )
${nav_string.body}\
      .// emit the result variable ready to have the accessor tacked on
      .invoke aa = get_attribute_accessor_from_str( node.NamingAttribute )
      if(result == null)
      	return "";
      String text = result.${aa.body}();
      if (text == null) {
        return "";
      }
      else {
        return text;
      }
    .else
      .invoke aa = get_attribute_accessor_from_str( node.NamingAttribute )
      String text = ((${ncn.body})element).${aa.body}();
      if (text == null) {
        return "";
      }
      else {
        return text;
      }
    .end if
    }
  .end for
  
    return "Unknown Model Element";
  }
  /**
   * @see ILabelProvider#dispose()
   */
  public void dispose() {
    for (Iterator i = imageCache.values().iterator(); i.hasNext();) {
      ((Image) i.next()).dispose();
    }
    imageCache.clear();
  }
}
.end function
