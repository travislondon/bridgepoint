@Ecore(nsURI="http://www.xtuml.org/bp/xtext/masl/MASLTypes")
@GenModel(
	copyrightText="generated by Xtext 2.9.2", 
	fileExtensions="mod,tr,ext,scn,al,int,svc,prj,fn", 
	forceOverwrite="true", 
	modelName="MASLTypes", 
	updateClasspath="false", 
	complianceLevel="6.0"
)

package org.xtuml.bp.xtext.masl.masl.types

import org.xtuml.bp.xtext.masl.masl.behavior.ConstExpression
import org.xtuml.bp.xtext.masl.masl.behavior.Expression
import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature
import org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed
import org.xtuml.bp.xtext.masl.masl.structure.ObjectDeclaration
import org.xtuml.bp.xtext.masl.masl.structure.Pragmatized
import org.xtuml.bp.xtext.masl.masl.structure.TerminatorDefinition
import org.xtuml.bp.xtext.masl.masl.structure.Visibility
import org.xtuml.bp.xtext.masl.masl.structure.RangeTypeReference

class TypeDeclaration extends Pragmatized , AbstractFeature {
	Visibility visibility
	boolean subtype
	contains AbstractTypeDefinition definition
}

class TypeForwardDeclaration extends AbstractNamed , Pragmatized {
	Visibility visibility
	boolean subtype
}

class BuiltinTypeDeclaration extends TypeDeclaration {
	boolean anonymous
}

class TerminatorTypeReference extends AbstractTypeReference {
	refers TerminatorDefinition terminator
}

class AbstractTypeDefinition {
}

class ConstrainedTypeDefinition extends AbstractTypeDefinition {
	contains NamedTypeReference ^type
	contains AbstractTypeConstraint constraint
}

class AbstractTypeConstraint {
}

class RangeConstraint extends AbstractTypeConstraint {
	contains Expression range
}

class DeltaConstraint extends AbstractTypeConstraint {
	contains ConstExpression delta
	contains RangeConstraint constraint
}

class DigitsConstraint extends AbstractTypeConstraint {
	contains ConstExpression digits
	contains RangeConstraint constraint
}

class StructureTypeDefinition extends AbstractTypeDefinition {
	contains StructureComponentDefinition[] components
}

class StructureComponentDefinition extends AbstractFeature, Pragmatized {
	contains AbstractTypeReference ^type
	contains ConstExpression defaultValue
}

class EnumerationTypeDefinition extends AbstractTypeDefinition {
	contains Enumerator[] enumerators
}

class Enumerator extends AbstractFeature {
	contains ConstExpression expression
}

class UnconstrainedArrayDefinition extends AbstractTypeDefinition {
	contains NamedTypeReference indexType
	contains AbstractTypeReference elementType
}

class AbstractTypeReference extends AbstractTypeDefinition {
}

class DeprecatedTypeReference extends AbstractTypeReference {
	String typeName
}

class InstanceTypeReference extends AbstractTypeReference , Expression {
	boolean anonymous
	refers ObjectDeclaration instance
}

class NamedTypeReference extends AbstractTypeReference {
	boolean anonymous
	refers TypeDeclaration ^type
}

class ConstrainedArrayTypeReference extends AbstractTypeReference {
	refers TypeDeclaration unconstrained
	contains Expression constraint
}

class AbstractCollectionTypeReference extends AbstractTypeReference , Expression {
	boolean anonymous
	contains AbstractTypeReference elementType
}

class SequenceTypeReference extends AbstractCollectionTypeReference {
	contains Expression expression
}

class ArrayTypeReference extends AbstractCollectionTypeReference {
	contains Expression expression
	contains RangeTypeReference indexType
}

class SetTypeReference extends AbstractCollectionTypeReference {
}

class BagTypeReference extends AbstractCollectionTypeReference {
}

class DictionaryTypeReference extends AbstractCollectionTypeReference {
	contains AbstractTypeReference keyType
}
