/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.types.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtuml.bp.xtext.masl.masl.behavior.ConstExpression;
import org.xtuml.bp.xtext.masl.masl.behavior.Expression;
import org.xtuml.bp.xtext.masl.masl.behavior.Statement;

import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature;
import org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed;
import org.xtuml.bp.xtext.masl.masl.structure.Pragmatized;

import org.xtuml.bp.xtext.masl.masl.types.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.xtext.masl.masl.types.TypesPackage
 * @generated
 */
public class TypesSwitch<T> extends Switch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static TypesPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypesSwitch() {
		if (modelPackage == null) {
			modelPackage = TypesPackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case TypesPackage.TYPE_DECLARATION: {
				TypeDeclaration typeDeclaration = (TypeDeclaration)theEObject;
				T result = caseTypeDeclaration(typeDeclaration);
				if (result == null) result = casePragmatized(typeDeclaration);
				if (result == null) result = caseAbstractFeature(typeDeclaration);
				if (result == null) result = caseAbstractNamed(typeDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.TYPE_FORWARD_DECLARATION: {
				TypeForwardDeclaration typeForwardDeclaration = (TypeForwardDeclaration)theEObject;
				T result = caseTypeForwardDeclaration(typeForwardDeclaration);
				if (result == null) result = caseAbstractNamed(typeForwardDeclaration);
				if (result == null) result = casePragmatized(typeForwardDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.BUILTIN_TYPE_DECLARATION: {
				BuiltinTypeDeclaration builtinTypeDeclaration = (BuiltinTypeDeclaration)theEObject;
				T result = caseBuiltinTypeDeclaration(builtinTypeDeclaration);
				if (result == null) result = caseTypeDeclaration(builtinTypeDeclaration);
				if (result == null) result = casePragmatized(builtinTypeDeclaration);
				if (result == null) result = caseAbstractFeature(builtinTypeDeclaration);
				if (result == null) result = caseAbstractNamed(builtinTypeDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.TERMINATOR_TYPE_REFERENCE: {
				TerminatorTypeReference terminatorTypeReference = (TerminatorTypeReference)theEObject;
				T result = caseTerminatorTypeReference(terminatorTypeReference);
				if (result == null) result = caseAbstractTypeReference(terminatorTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(terminatorTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ABSTRACT_TYPE_DEFINITION: {
				AbstractTypeDefinition abstractTypeDefinition = (AbstractTypeDefinition)theEObject;
				T result = caseAbstractTypeDefinition(abstractTypeDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.CONSTRAINED_TYPE_DEFINITION: {
				ConstrainedTypeDefinition constrainedTypeDefinition = (ConstrainedTypeDefinition)theEObject;
				T result = caseConstrainedTypeDefinition(constrainedTypeDefinition);
				if (result == null) result = caseAbstractTypeDefinition(constrainedTypeDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ABSTRACT_TYPE_CONSTRAINT: {
				AbstractTypeConstraint abstractTypeConstraint = (AbstractTypeConstraint)theEObject;
				T result = caseAbstractTypeConstraint(abstractTypeConstraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.RANGE_CONSTRAINT: {
				RangeConstraint rangeConstraint = (RangeConstraint)theEObject;
				T result = caseRangeConstraint(rangeConstraint);
				if (result == null) result = caseAbstractTypeConstraint(rangeConstraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.DELTA_CONSTRAINT: {
				DeltaConstraint deltaConstraint = (DeltaConstraint)theEObject;
				T result = caseDeltaConstraint(deltaConstraint);
				if (result == null) result = caseAbstractTypeConstraint(deltaConstraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.DIGITS_CONSTRAINT: {
				DigitsConstraint digitsConstraint = (DigitsConstraint)theEObject;
				T result = caseDigitsConstraint(digitsConstraint);
				if (result == null) result = caseAbstractTypeConstraint(digitsConstraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.STRUCTURE_TYPE_DEFINITION: {
				StructureTypeDefinition structureTypeDefinition = (StructureTypeDefinition)theEObject;
				T result = caseStructureTypeDefinition(structureTypeDefinition);
				if (result == null) result = caseAbstractTypeDefinition(structureTypeDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.STRUCTURE_COMPONENT_DEFINITION: {
				StructureComponentDefinition structureComponentDefinition = (StructureComponentDefinition)theEObject;
				T result = caseStructureComponentDefinition(structureComponentDefinition);
				if (result == null) result = caseAbstractFeature(structureComponentDefinition);
				if (result == null) result = casePragmatized(structureComponentDefinition);
				if (result == null) result = caseAbstractNamed(structureComponentDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ENUMERATION_TYPE_DEFINITION: {
				EnumerationTypeDefinition enumerationTypeDefinition = (EnumerationTypeDefinition)theEObject;
				T result = caseEnumerationTypeDefinition(enumerationTypeDefinition);
				if (result == null) result = caseAbstractTypeDefinition(enumerationTypeDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ENUMERATOR: {
				Enumerator enumerator = (Enumerator)theEObject;
				T result = caseEnumerator(enumerator);
				if (result == null) result = caseAbstractFeature(enumerator);
				if (result == null) result = caseAbstractNamed(enumerator);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.UNCONSTRAINED_ARRAY_DEFINITION: {
				UnconstrainedArrayDefinition unconstrainedArrayDefinition = (UnconstrainedArrayDefinition)theEObject;
				T result = caseUnconstrainedArrayDefinition(unconstrainedArrayDefinition);
				if (result == null) result = caseAbstractTypeDefinition(unconstrainedArrayDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ABSTRACT_TYPE_REFERENCE: {
				AbstractTypeReference abstractTypeReference = (AbstractTypeReference)theEObject;
				T result = caseAbstractTypeReference(abstractTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(abstractTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.DEPRECATED_TYPE_REFERENCE: {
				DeprecatedTypeReference deprecatedTypeReference = (DeprecatedTypeReference)theEObject;
				T result = caseDeprecatedTypeReference(deprecatedTypeReference);
				if (result == null) result = caseAbstractTypeReference(deprecatedTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(deprecatedTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.INSTANCE_TYPE_REFERENCE: {
				InstanceTypeReference instanceTypeReference = (InstanceTypeReference)theEObject;
				T result = caseInstanceTypeReference(instanceTypeReference);
				if (result == null) result = caseAbstractTypeReference(instanceTypeReference);
				if (result == null) result = caseExpression(instanceTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(instanceTypeReference);
				if (result == null) result = caseStatement(instanceTypeReference);
				if (result == null) result = caseConstExpression(instanceTypeReference);
				if (result == null) result = casePragmatized(instanceTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.NAMED_TYPE_REFERENCE: {
				NamedTypeReference namedTypeReference = (NamedTypeReference)theEObject;
				T result = caseNamedTypeReference(namedTypeReference);
				if (result == null) result = caseAbstractTypeReference(namedTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(namedTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.CONSTRAINED_ARRAY_TYPE_REFERENCE: {
				ConstrainedArrayTypeReference constrainedArrayTypeReference = (ConstrainedArrayTypeReference)theEObject;
				T result = caseConstrainedArrayTypeReference(constrainedArrayTypeReference);
				if (result == null) result = caseAbstractTypeReference(constrainedArrayTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(constrainedArrayTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ABSTRACT_COLLECTION_TYPE_REFERENCE: {
				AbstractCollectionTypeReference abstractCollectionTypeReference = (AbstractCollectionTypeReference)theEObject;
				T result = caseAbstractCollectionTypeReference(abstractCollectionTypeReference);
				if (result == null) result = caseAbstractTypeReference(abstractCollectionTypeReference);
				if (result == null) result = caseExpression(abstractCollectionTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(abstractCollectionTypeReference);
				if (result == null) result = caseStatement(abstractCollectionTypeReference);
				if (result == null) result = caseConstExpression(abstractCollectionTypeReference);
				if (result == null) result = casePragmatized(abstractCollectionTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.SEQUENCE_TYPE_REFERENCE: {
				SequenceTypeReference sequenceTypeReference = (SequenceTypeReference)theEObject;
				T result = caseSequenceTypeReference(sequenceTypeReference);
				if (result == null) result = caseAbstractCollectionTypeReference(sequenceTypeReference);
				if (result == null) result = caseAbstractTypeReference(sequenceTypeReference);
				if (result == null) result = caseExpression(sequenceTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(sequenceTypeReference);
				if (result == null) result = caseStatement(sequenceTypeReference);
				if (result == null) result = caseConstExpression(sequenceTypeReference);
				if (result == null) result = casePragmatized(sequenceTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.ARRAY_TYPE_REFERENCE: {
				ArrayTypeReference arrayTypeReference = (ArrayTypeReference)theEObject;
				T result = caseArrayTypeReference(arrayTypeReference);
				if (result == null) result = caseAbstractCollectionTypeReference(arrayTypeReference);
				if (result == null) result = caseAbstractTypeReference(arrayTypeReference);
				if (result == null) result = caseExpression(arrayTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(arrayTypeReference);
				if (result == null) result = caseStatement(arrayTypeReference);
				if (result == null) result = caseConstExpression(arrayTypeReference);
				if (result == null) result = casePragmatized(arrayTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.SET_TYPE_REFERENCE: {
				SetTypeReference setTypeReference = (SetTypeReference)theEObject;
				T result = caseSetTypeReference(setTypeReference);
				if (result == null) result = caseAbstractCollectionTypeReference(setTypeReference);
				if (result == null) result = caseAbstractTypeReference(setTypeReference);
				if (result == null) result = caseExpression(setTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(setTypeReference);
				if (result == null) result = caseStatement(setTypeReference);
				if (result == null) result = caseConstExpression(setTypeReference);
				if (result == null) result = casePragmatized(setTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.BAG_TYPE_REFERENCE: {
				BagTypeReference bagTypeReference = (BagTypeReference)theEObject;
				T result = caseBagTypeReference(bagTypeReference);
				if (result == null) result = caseAbstractCollectionTypeReference(bagTypeReference);
				if (result == null) result = caseAbstractTypeReference(bagTypeReference);
				if (result == null) result = caseExpression(bagTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(bagTypeReference);
				if (result == null) result = caseStatement(bagTypeReference);
				if (result == null) result = caseConstExpression(bagTypeReference);
				if (result == null) result = casePragmatized(bagTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case TypesPackage.DICTIONARY_TYPE_REFERENCE: {
				DictionaryTypeReference dictionaryTypeReference = (DictionaryTypeReference)theEObject;
				T result = caseDictionaryTypeReference(dictionaryTypeReference);
				if (result == null) result = caseAbstractCollectionTypeReference(dictionaryTypeReference);
				if (result == null) result = caseAbstractTypeReference(dictionaryTypeReference);
				if (result == null) result = caseExpression(dictionaryTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(dictionaryTypeReference);
				if (result == null) result = caseStatement(dictionaryTypeReference);
				if (result == null) result = caseConstExpression(dictionaryTypeReference);
				if (result == null) result = casePragmatized(dictionaryTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTypeDeclaration(TypeDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Type Forward Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Type Forward Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTypeForwardDeclaration(TypeForwardDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Builtin Type Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Builtin Type Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBuiltinTypeDeclaration(BuiltinTypeDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Terminator Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Terminator Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTerminatorTypeReference(TerminatorTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Type Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Type Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTypeDefinition(AbstractTypeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Constrained Type Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Constrained Type Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConstrainedTypeDefinition(ConstrainedTypeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Type Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Type Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTypeConstraint(AbstractTypeConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Range Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Range Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRangeConstraint(RangeConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Delta Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Delta Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDeltaConstraint(DeltaConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Digits Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Digits Constraint</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDigitsConstraint(DigitsConstraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Structure Type Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Structure Type Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStructureTypeDefinition(StructureTypeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Structure Component Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Structure Component Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStructureComponentDefinition(StructureComponentDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enumeration Type Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enumeration Type Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnumerationTypeDefinition(EnumerationTypeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Enumerator</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Enumerator</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEnumerator(Enumerator object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unconstrained Array Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unconstrained Array Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnconstrainedArrayDefinition(UnconstrainedArrayDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTypeReference(AbstractTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Deprecated Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Deprecated Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDeprecatedTypeReference(DeprecatedTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Instance Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Instance Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseInstanceTypeReference(InstanceTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Named Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Named Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNamedTypeReference(NamedTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Constrained Array Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Constrained Array Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConstrainedArrayTypeReference(ConstrainedArrayTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Collection Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Collection Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractCollectionTypeReference(AbstractCollectionTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sequence Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sequence Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSequenceTypeReference(SequenceTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Array Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Array Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseArrayTypeReference(ArrayTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Set Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Set Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSetTypeReference(SetTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Bag Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Bag Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBagTypeReference(BagTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Dictionary Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Dictionary Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDictionaryTypeReference(DictionaryTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePragmatized(Pragmatized object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractNamed(AbstractNamed object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractFeature(AbstractFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStatement(Statement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Const Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Const Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConstExpression(ConstExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExpression(Expression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object) {
		return null;
	}

} //TypesSwitch
