/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.behavior.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.masl.behavior.BehaviorPackage;
import org.xtuml.bp.xtext.masl.masl.behavior.CodeBlock;
import org.xtuml.bp.xtext.masl.masl.behavior.DefaultExceptionHandler;
import org.xtuml.bp.xtext.masl.masl.behavior.ExceptionHandler;
import org.xtuml.bp.xtext.masl.masl.behavior.Statement;
import org.xtuml.bp.xtext.masl.masl.behavior.StatementList;
import org.xtuml.bp.xtext.masl.masl.behavior.VariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Code Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.CodeBlockImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.CodeBlockImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.CodeBlockImpl#getExceptionHandler <em>Exception Handler</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.CodeBlockImpl#getDefaultHandler <em>Default Handler</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CodeBlockImpl extends CodeBlockStatementImpl implements CodeBlock {
	/**
	 * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStatements()
	 * @generated
	 * @ordered
	 */
	protected EList<Statement> statements;

	/**
	 * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVariables()
	 * @generated
	 * @ordered
	 */
	protected EList<VariableDeclaration> variables;

	/**
	 * The cached value of the '{@link #getExceptionHandler() <em>Exception Handler</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExceptionHandler()
	 * @generated
	 * @ordered
	 */
	protected EList<ExceptionHandler> exceptionHandler;

	/**
	 * The cached value of the '{@link #getDefaultHandler() <em>Default Handler</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDefaultHandler()
	 * @generated
	 * @ordered
	 */
	protected DefaultExceptionHandler defaultHandler;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeBlockImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BehaviorPackage.Literals.CODE_BLOCK;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Statement> getStatements() {
		if (statements == null) {
			statements = new EObjectContainmentEList<Statement>(Statement.class, this, BehaviorPackage.CODE_BLOCK__STATEMENTS);
		}
		return statements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<VariableDeclaration> getVariables() {
		if (variables == null) {
			variables = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, BehaviorPackage.CODE_BLOCK__VARIABLES);
		}
		return variables;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ExceptionHandler> getExceptionHandler() {
		if (exceptionHandler == null) {
			exceptionHandler = new EObjectContainmentEList<ExceptionHandler>(ExceptionHandler.class, this, BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER);
		}
		return exceptionHandler;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DefaultExceptionHandler getDefaultHandler() {
		return defaultHandler;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetDefaultHandler(DefaultExceptionHandler newDefaultHandler, NotificationChain msgs) {
		DefaultExceptionHandler oldDefaultHandler = defaultHandler;
		defaultHandler = newDefaultHandler;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER, oldDefaultHandler, newDefaultHandler);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDefaultHandler(DefaultExceptionHandler newDefaultHandler) {
		if (newDefaultHandler != defaultHandler) {
			NotificationChain msgs = null;
			if (defaultHandler != null)
				msgs = ((InternalEObject)defaultHandler).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER, null, msgs);
			if (newDefaultHandler != null)
				msgs = ((InternalEObject)newDefaultHandler).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER, null, msgs);
			msgs = basicSetDefaultHandler(newDefaultHandler, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER, newDefaultHandler, newDefaultHandler));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BehaviorPackage.CODE_BLOCK__STATEMENTS:
				return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CODE_BLOCK__VARIABLES:
				return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER:
				return ((InternalEList<?>)getExceptionHandler()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER:
				return basicSetDefaultHandler(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BehaviorPackage.CODE_BLOCK__STATEMENTS:
				return getStatements();
			case BehaviorPackage.CODE_BLOCK__VARIABLES:
				return getVariables();
			case BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER:
				return getExceptionHandler();
			case BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER:
				return getDefaultHandler();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BehaviorPackage.CODE_BLOCK__STATEMENTS:
				getStatements().clear();
				getStatements().addAll((Collection<? extends Statement>)newValue);
				return;
			case BehaviorPackage.CODE_BLOCK__VARIABLES:
				getVariables().clear();
				getVariables().addAll((Collection<? extends VariableDeclaration>)newValue);
				return;
			case BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER:
				getExceptionHandler().clear();
				getExceptionHandler().addAll((Collection<? extends ExceptionHandler>)newValue);
				return;
			case BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER:
				setDefaultHandler((DefaultExceptionHandler)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BehaviorPackage.CODE_BLOCK__STATEMENTS:
				getStatements().clear();
				return;
			case BehaviorPackage.CODE_BLOCK__VARIABLES:
				getVariables().clear();
				return;
			case BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER:
				getExceptionHandler().clear();
				return;
			case BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER:
				setDefaultHandler((DefaultExceptionHandler)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BehaviorPackage.CODE_BLOCK__STATEMENTS:
				return statements != null && !statements.isEmpty();
			case BehaviorPackage.CODE_BLOCK__VARIABLES:
				return variables != null && !variables.isEmpty();
			case BehaviorPackage.CODE_BLOCK__EXCEPTION_HANDLER:
				return exceptionHandler != null && !exceptionHandler.isEmpty();
			case BehaviorPackage.CODE_BLOCK__DEFAULT_HANDLER:
				return defaultHandler != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
		if (baseClass == StatementList.class) {
			switch (derivedFeatureID) {
				case BehaviorPackage.CODE_BLOCK__STATEMENTS: return BehaviorPackage.STATEMENT_LIST__STATEMENTS;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
		if (baseClass == StatementList.class) {
			switch (baseFeatureID) {
				case BehaviorPackage.STATEMENT_LIST__STATEMENTS: return BehaviorPackage.CODE_BLOCK__STATEMENTS;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

} //CodeBlockImpl
