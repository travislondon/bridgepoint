package org.xtuml.bp.core.ui.actions;
//======================================================================

//
// File: org/xtuml/bp/core/ui/ImportScenariosFromComponentOnD_DEPLAction.java
//
// NOTE: This file is currently hand written, the infrastructure is not configured to support
// the order enabled selection.
//
// WARNING:      Do not edit this generated file
// Generated by: create_selection_dialog_action.inc
// Version:      $Revision: 1.10 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// 
//

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;
import org.xtuml.bp.core.CorePlugin;
import org.xtuml.bp.core.Deployment_c;
import org.xtuml.bp.core.Function_c;
import org.xtuml.bp.core.Ooaofooa;
import org.xtuml.bp.core.Package_c;
import org.xtuml.bp.core.PackageableElement_c;
import org.xtuml.bp.core.Terminator_c;
import org.xtuml.bp.core.common.PersistenceManager;
import org.xtuml.bp.core.ui.Selection;
import org.xtuml.bp.core.ui.dialogs.ElementSelectionDialog;
import org.xtuml.bp.core.util.TransactionUtil;

public class ImportScenariosFromComponentOnD_DEPLAction implements IObjectActionDelegate {

	/**
	 * Constructor for ImportScenariosFromComponentOnD_DEPLAction.
	 */
	public ImportScenariosFromComponentOnD_DEPLAction() {
		super();
	}

	/**
	 * @see IObjectActionDelegate#setActivePart(IAction, IWorkbenchPart)
	 */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		// The part is mainly needed to locate the selection provider, and
		// we cache our selection in core so no action is needed here.
	}

	/**
	 * @see IActionDelegate#run(IAction)
	 */
	public void run(IAction action) {
		IStructuredSelection structuredSelection = Selection.getInstance().getStructuredSelection();
		D_DEPL_ImportScenariosFromComponent(structuredSelection);
	}

	/**
	 * @see IActionDelegate#selectionChanged(IAction, ISelection)
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		// do nothing
	}

	public static void D_DEPL_ImportScenariosFromComponent(IStructuredSelection selection) {
		// Assign the context selection variables with the action context
		// Assign the context selection variable with the action context
		Object context = selection.iterator().next();
		Deployment_c v_element = (Deployment_c) context;
		// ensure that all Functions are loaded
		PersistenceManager.ensureAllInstancesLoaded(v_element.getModelRoot(), Function_c.class);
		// now find all the elements that should be shown
		Function_c[] elements = getElements(v_element);
		ElementSelectionDialog dialog = new ElementSelectionDialog(
				PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), elements, "component", true, null,
				false, null, true);
		dialog.setBlockOnOpen(true);
		dialog.setTitle("Import Scenarios From Component Selection");
		int result = dialog.open();
		if (result == Window.OK) {
			Function_c[] v_selectedFunctions = Arrays.copyOf(dialog.getResult(), dialog.getResult().length,
					Function_c[].class);
			if (v_selectedFunctions != null) {

				TransactionUtil.TransactionGroup transactionGroup = TransactionUtil
						.startTransactionsOnSelectedModelRoots("-- Import scenarios from component");
				try {
					// Ensure that actions take place between Verifier Activity executions
					Ooaofooa.beginSaveOperation();
					if ((v_element != null)) {
						Terminator_c v_terminator = v_element.Createorreturnterminatorforscenarios();
						Function_c v_selectedFunction = null;
						for (int for_index_selectedFunction = 0; for_index_selectedFunction < v_selectedFunctions.length; for_index_selectedFunction++) {
							v_selectedFunction = v_selectedFunctions[for_index_selectedFunction];

							if (v_terminator != null) {
								v_terminator.Importfunctionasterminator(v_selectedFunction);
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin.logError("Attempted to call an operation on a null instance.", t);
							}

						}
					}

					// end critical section
					Ooaofooa.endSaveOperation();
					// catch all exceptions and cancel the transactions
				} catch (Exception e) {
					Ooaofooa.endSaveOperation();
					TransactionUtil.cancelTransactions(transactionGroup, e);
					CorePlugin.logError("Transaction: -- Import scenarios from component failed", e);//$NON-NLS-1$
				}
				TransactionUtil.endTransactions(transactionGroup);
			}
		}
	}

	public static Function_c[] getElements(Deployment_c v_element) {
		List<Function_c> elementList = new ArrayList<Function_c>();
		PackageableElement_c pe = PackageableElement_c.getOnePE_PEOnR8001(v_element);
		Package_c pkg = Package_c.getOneEP_PKGOnR8000(pe);
		if (pkg != null) {
			Ooaofooa[] instances = Ooaofooa.getInstances();
			elementList = Arrays.stream(instances).flatMap(
					i -> i.getInstanceList(Function_c.class).stream().filter(l -> ((Function_c) l).Isavailablescenario(v_element)))
					.map(n -> (Function_c) n).collect(Collectors.toList());
		}
		return elementList.toArray(new Function_c[elementList.size()]);
	} // end getElements(Deployment_c)
} // end ImportScenariosFromComponentOnD_DEPLAction
